name: ci

on:
  push:
    branches: ["main", "feat/**"]
  pull_request:
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  API_IMAGE: cs598-api
  UI_IMAGE: cs598-ui
  # Toggle CI tests with a repo secret named RUN_TESTS (set to "true" to enable)
  RUN_TESTS: ${{ secrets.RUN_TESTS }}
  # Toggle image push to GHCR with a secret named REGISTRY_PUSH ("true" to push)
  REGISTRY_PUSH: ${{ secrets.REGISTRY_PUSH }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Decide whether to run tests
        run: |
          if [ "${RUN_TESTS}" != "true" ]; then
            echo "âœ… Skipping tests in CI (set repo secret RUN_TESTS=true to enable)."
            exit 0
          fi

      # Everything below runs only when RUN_TESTS == "true"
      - name: Set up Python 3.11
        if: ${{ env.RUN_TESTS == 'true' }}
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        if: ${{ env.RUN_TESTS == 'true' }}
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install deps (project)
        if: ${{ env.RUN_TESTS == 'true' }}
        run: |
          python -m pip install -U pip wheel
          pip install -r requirements.txt

      - name: Install test-only deps (CPU PyTorch + optional OpenCV)
        if: ${{ env.RUN_TESTS == 'true' }}
        run: |
          pip install --extra-index-url https://download.pytorch.org/whl/cpu \
            torch==2.4.1 torchvision==0.19.1 --no-cache-dir
          # Uncomment if you keep OpenCV tests enabled
          # pip install opencv-python-headless==4.10.0.84
          pip install pytest-asyncio==0.23.6

      - name: Set PYTHONPATH & CI env
        if: ${{ env.RUN_TESTS == 'true' }}
        run: |
          echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
          echo "MODEL_BACKEND=stub" >> $GITHUB_ENV

      - name: Run tests
        if: ${{ env.RUN_TESTS == 'true' }}
        run: pytest -q

  build-api:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        if: env.REGISTRY_PUSH == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Derive tags
        run: |
          echo "SHA_TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV
          echo "OWNER_LC=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build API image (Dockerfile.api)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.api
          push: ${{ env.REGISTRY_PUSH == 'true' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/${{ env.API_IMAGE }}:${{ env.SHA_TAG }}
            ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/${{ env.API_IMAGE }}:latest
          provenance: false

  build-ui:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        if: env.REGISTRY_PUSH == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Derive tags
        run: |
          echo "SHA_TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV
          echo "OWNER_LC=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build UI image (Dockerfile.ui)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.ui
          push: ${{ env.REGISTRY_PUSH == 'true' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/${{ env.UI_IMAGE }}:${{ env.SHA_TAG }}
            ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/${{ env.UI_IMAGE }}:latest
          provenance: false



